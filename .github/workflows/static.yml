# Este flujo de trabajo utiliza acciones que no están certificadas por GitHub.
# Son proporcionadas por un tercero y se rigen por
# términos de servicio, política de privacidad y documentación de soporte
# separados.

# Este flujo de trabajo construirá una imagen Docker para NGINX basada en Alpine,
# la publicará en Docker Hub y GitHub Container Registry, y ejecutará pruebas de integración.
name: NGINX Alpine Docker CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_push_docker_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Necesario para publicar imágenes en GitHub Packages (ghcr.io)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      # Esta acción utiliza ${{ secrets.DOCKER_USERNAME }} y ${{ secrets.DOCKER_PASSWORD }}
      # Asegúrate de que DOCKER_PASSWORD contenga tu Personal Access Token de Docker Hub.
      if: github.event_name != 'pull_request' # Solo intenta login si no es un PR
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      # Esta acción utiliza el GITHUB_TOKEN proporcionado automáticamente por GitHub Actions
      # para autenticarse en ghcr.io.
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: . # El contexto de la construcción es el directorio raíz del repositorio
        push: ${{ github.event_name != 'pull_request' }} # Solo hace push en eventos que no sean pull_request
        # Los tags DEBEN ser una lista de cadenas de texto válidas, sin comentarios inline.
        # Todos los tags deben ser en minúsculas para ghcr.io.
        tags: |
          flichel/mi-pagina-web:latest
          flichel/mi-pagina-web:1.0
          flichel/mi-pagina-web:${{ github.sha }}
          ghcr.io/flichel/dockernginx:latest
          ghcr.io/flichel/dockernginx:1.0
          ghcr.io/flichel/dockernginx:${{ github.sha }}
        file: ./Dockerfile # Asegúrate de que tu Dockerfile está en la raíz del repositorio

  integration_tests:
    runs-on: ubuntu-latest
    # Este job necesita que la imagen se haya construido y esté disponible en el registry
    # antes de poder ejecutar las pruebas.
    needs: build_and_push_docker_image
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      # Es importante loguearse de nuevo para poder descargar la imagen (pull)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image
      # Descargamos la imagen que acabamos de construir.
      # Usamos el tag 'latest' de ghcr.io (con el nombre del repo en minúsculas).
      run: docker pull ghcr.io/flichel/dockernginx:latest

    - name: Run Docker container for tests
      # Ejecutamos el contenedor en segundo plano.
      # Mapeamos el puerto 8080 del host (runner) al puerto 80 del contenedor.
      run: docker run -d -p 8080:80 --name test-nginx ghcr.io/flichel/dockernginx:latest

    - name: Wait for Nginx to be ready
      # Esperamos un momento para que Nginx inicie completamente dentro del contenedor.
      # Esto evita que las pruebas fallen si el servidor no está listo inmediatamente.
      run: |
        echo "Esperando que Nginx esté listo..."
        timeout 60 bash -c 'until curl -s http://localhost:8080; do sleep 1; done'
        echo "Nginx está listo."

    - name: Run Integration Tests
      # Ejecutamos tu script de pruebas.
      # Ajustamos los curl en el script para que apunten al puerto 8080 del host.
      run: |
        chmod +x ./test/test.sh # Asegúrate de que el script sea ejecutable
        # Reemplazamos 'http://localhost' por 'http://localhost:8080' en el script
        sed -i 's|http://localhost|http://localhost:8080|g' ./test/test.sh
        ./test/test.sh # Ejecuta el script de pruebas ubicado en la carpeta 'test'

    - name: Stop and remove Docker container
      if: always() # Ejecutar siempre, incluso si las pruebas fallan, para limpiar recursos
      run: docker stop test-nginx && docker rm test-nginx

  security_scan:
    runs-on: ubuntu-latest
    # Este job solo necesita la imagen construida, no que las pruebas pasen necesariamente.
    needs: build_and_push_docker_image
    permissions:
      contents: read
      security-events: write # Necesario para subir resultados de escaneo de seguridad a GitHub

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Download built image
      # Descargamos la imagen para escanearla.
      run: docker pull ghcr.io/flichel/dockernginx:latest

    - name: Run Trivy vulnerability scan
      uses: aquasec/trivy-action@master
      with:
        image-ref: ghcr.io/flichel/dockernginx:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        # Puedes configurar la severidad mínima y otras opciones de Trivy aquí (ej: severity: 'HIGH,CRITICAL')

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'